Halsted$newDate<-newDate
Halsted$date<-NULL
#------------------------------------
#menu items to select different years and different stations
years <- c(2001:2021)
#TODO:fill in station part
?dashboardSidebar
# Define UI for application that draws a histogram
ui <- dashboardPage(
# Application title
dashboardHeader(title = "CS 424 Spring 2022 Jack Martin Project 1"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
sidebarMenu(),#empty for now
id = "tabs"
selectInput("Year", "Select the year to visualize", years, selected = 2021),
menuItem("Entries every Year", tabName = "allYears"),
menuItem("Detailed View", icon = icon("dashboard"), tabName = "detailed" )
),
# Show a plot of the generated distribution
dashboardBody(
tabItems(
tabItem(tabName = "allYears",
box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("entryYear")
)
),
tabItem(tabName = "detailed",
h2("Hullo")
)
)
# fluidRow(
#   box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
#       plotOutput("entryYear")
#       )
# )
)
)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
setwd("D:/R data 424/Project 1")
#------------------------------------
#reading in data for halsted
Halsted <- read.table(file = "./Halsted Stop.tsv", sep = "\t", header = TRUE)
#converting date type to workable column
newDate <- as.Date(Halsted$date, "%m/%d/%Y")
Halsted$newDate<-newDate
Halsted$date<-NULL
#------------------------------------
#menu items to select different years and different stations
years <- c(2001:2021)
#TODO:fill in station part
?dashboardSidebar
# Define UI for application that draws a histogram
ui <- dashboardPage(
# Application title
dashboardHeader(title = "CS 424 Spring 2022 Jack Martin Project 1"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
sidebarMenu(),#empty for now
id = "tabs",
selectInput("Year", "Select the year to visualize", years, selected = 2021),
menuItem("Entries every Year", tabName = "allYears"),
menuItem("Detailed View", icon = icon("dashboard"), tabName = "detailed" )
),
# Show a plot of the generated distribution
dashboardBody(
tabItems(
tabItem(tabName = "allYears",
box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("entryYear")
)
),
tabItem(tabName = "detailed",
h2("Hullo")
)
)
# fluidRow(
#   box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
#       plotOutput("entryYear")
#       )
# )
)
)
# Define server logic required to draw a histogram
server <- function(input, output,session) {
observeEvent(input$switchtab, {
newtab <- switch(input$tabs,
"allYears" = "detailed",
"detailed" = "allYears"
)
updateTabItems(session, "tabs", newtab)
})
# output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
# })
output$entryYear <- renderPlot({
ggplot(Halsted, aes(year(newDate),rides))+
geom_bar(stat="identity",fill="#88CCEE")+
labs(x = "Years", y = "Number of Entries", title = "Entries per Year")+
theme_bw()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
setwd("D:/R data 424/Project 1")
#------------------------------------
#reading in data for halsted
Halsted <- read.table(file = "./Halsted Stop.tsv", sep = "\t", header = TRUE)
#converting date type to workable column
newDate <- as.Date(Halsted$date, "%m/%d/%Y")
Halsted$newDate<-newDate
Halsted$date<-NULL
#------------------------------------
#menu items to select different years and different stations
years <- c(2001:2021)
#TODO:fill in station part
?dashboardSidebar
# Define UI for application that draws a histogram
# Application title
dashboardSidebar(disable = FALSE, collapsed = FALSE,
id = "tabs",
runApp()
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
setwd("D:/R data 424/Project 1")
#------------------------------------
#reading in data for halsted
Halsted <- read.table(file = "./Halsted Stop.tsv", sep = "\t", header = TRUE)
#converting date type to workable column
newDate <- as.Date(Halsted$date, "%m/%d/%Y")
Halsted$newDate<-newDate
Halsted$date<-NULL
#------------------------------------
#menu items to select different years and different stations
years <- c(2001:2021)
#TODO:fill in station part
?dashboardSidebar
# Define UI for application that draws a histogram
ui <- dashboardPage(
# Application title
dashboardHeader(title = "CS 424 Spring 2022 Jack Martin Project 1"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
sidebarMenu(),#empty for now
id = "tabs",
selectInput("Year", "Select the year to visualize", years, selected = 2021),
menuItem("Entries every Year", tabName = "allYears"),
menuItem("Detailed View", icon = icon("dashboard"), tabName = "detailed" )
),
# Show a plot of the generated distribution
dashboardBody(
tabItems(
tabItem(tabName = "allYears",
box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("entryYear")
)
),
tabItem(tabName = "detailed",
box(title = "Entries over each Day", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("eachDay")
)
)
)
# fluidRow(
#   box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
#       plotOutput("entryYear")
#       )
# )
)
)
# Define server logic required to draw a histogram
server <- function(input, output,session) {
observeEvent(input$switchtab, {
newtab <- switch(input$tabs,
"allYears" = "detailed",
"detailed" = "allYears"
)
updateTabItems(session, "tabs", newtab)
})
# output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
# })
output$entryYear <- renderPlot({
ggplot(Halsted, aes(year(newDate),rides))+
geom_bar(stat="identity",fill="#88CCEE")+
labs(x = "Years", y = "Number of Entries", title = "Entries per Year")+
theme_bw()
})
output$eachDay <-renderPlot({
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot()+
geom_bar(aes(newDate,rides,fill= uniq.loc),stat = "identity",fill="#88CCEE")+
labs(x = "Days of 2021", y = "Number of Entries", title = "Entries in 2021")+
theme_bw()+
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
setwd("D:/R data 424/Project 1")
#------------------------------------
#reading in data for halsted
Halsted <- read.table(file = "./Halsted Stop.tsv", sep = "\t", header = TRUE)
#converting date type to workable column
newDate <- as.Date(Halsted$date, "%m/%d/%Y")
Halsted$newDate<-newDate
Halsted$date<-NULL
#------------------------------------
#menu items to select different years and different stations
years <- c(2001:2021)
#TODO:fill in station part
?dashboardSidebar
# Define UI for application that draws a histogram
ui <- dashboardPage(
# Application title
dashboardHeader(title = "CS 424 Spring 2022 Jack Martin Project 1"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
sidebarMenu(),#empty for now
id = "tabs",
selectInput("Year", "Select the year to visualize", years, selected = 2021),
menuItem("Entries every Year", tabName = "allYears"),
menuItem("Detailed View", tabName = "detailed" )
),
# Show a plot of the generated distribution
dashboardBody(
tabItems(
tabItem(tabName = "allYears",
box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("entryYear")
)
),
tabItem(tabName = "detailed",
box(title = "Entries over each Day", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("eachDay")
)
)
)
# fluidRow(
#   box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
#       plotOutput("entryYear")
#       )
# )
)
)
# Define server logic required to draw a histogram
server <- function(input, output,session) {
observeEvent(input$switchtab, {
newtab <- switch(input$tabs,
"allYears" = "detailed",
"detailed" = "allYears"
)
updateTabItems(session, "tabs", newtab)
})
# output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
# })
output$entryYear <- renderPlot({
ggplot(Halsted, aes(year(newDate),rides))+
geom_bar(stat="identity",fill="#88CCEE")+
labs(x = "Years", y = "Number of Entries", title = "Entries per Year")+
theme_bw()
})
output$eachDay <-renderPlot({
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot()+
geom_bar(aes(newDate,rides,fill= uniq.loc),stat = "identity",fill="#88CCEE")+
labs(x = "Days of 2021", y = "Number of Entries", title = "Entries in 2021")+
theme_bw()+
scale_x_date(date_breaks = "1 month", date_labels = "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
setwd("D:/R data 424/Project 1")
#------------------------------------
#reading in data for halsted
Halsted <- read.table(file = "./Halsted Stop.tsv", sep = "\t", header = TRUE)
#converting date type to workable column
newDate <- as.Date(Halsted$date, "%m/%d/%Y")
Halsted$newDate<-newDate
Halsted$date<-NULL
#------------------------------------
#menu items to select different years and different stations
years <- c(2001:2021)
#TODO:fill in station part
?dashboardSidebar
# Define UI for application that draws a histogram
ui <- dashboardPage(
# Application title
dashboardHeader(title = "CS 424 Spring 2022 Jack Martin Project 1"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
sidebarMenu(
id = "tabs",
selectInput("Year", "Select the year to visualize", years, selected = 2021),
menuItem("Entries every Year", tabName = "allYears"),
menuItem("Detailed View", tabName = "detailed" ))#empty for now
),
# Show a plot of the generated distribution
dashboardBody(
tabItems(
tabItem(tabName = "allYears",
box(title = "Entries over the Years", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("entryYear")
)
),
tabItem(tabName = "detailed",
box(title = "Entries over each Day", solidHeader = TRUE, status = "primary", width = 12,
splitLayout(cellWidths = c("50%", "50%"), plotOutput("eachDay"), plotOutput("eachMonth"))
)
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output,session) {
observeEvent(input$switchtab, {
newtab <- switch(input$tabs,
"allYears" = "detailed",
"detailed" = "allYears"
)
updateTabItems(session, "tabs", newtab)
})
# output$distPlot <- renderPlot({
#     # generate bins based on input$bins from ui.R
#     x    <- faithful[, 2]
#     bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#     # draw the histogram with the specified number of bins
#     hist(x, breaks = bins, col = 'darkgray', border = 'white')
# })
output$entryYear <- renderPlot({
ggplot(Halsted, aes(year(newDate),rides))+
geom_bar(stat="identity",fill="#88CCEE")+
labs(x = "Years", y = "Number of Entries", title = "Entries per Year")+
theme_bw()
})
output$eachDay <- renderPlot({
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot()+
geom_bar(aes(newDate,rides,fill= uniq.loc),stat = "identity",fill="#88CCEE")+
labs(x = "Days of 2021", y = "Number of Entries", title = "Entries in 2021")+
theme_bw()+
scale_x_date(date_breaks = "1 month", date_labels = "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))
})
output$eachMonth <- renderPlot({
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot(aes(month(newDate,label = TRUE),rides))+
geom_bar(stat = "identity",fill="#88CCEE")+
labs(x = "Months", y = "Number of Entries", title = "Entries per Month")+
theme_bw()+
scale_y_continuous(expand = c(0,0))
scale_x_continuous(expand = c(0,0))
})
}
shinyApp(ui = ui, server = server)
runApp()
output$eachMonth <- renderPlot({
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot(aes(month(newDate,label = TRUE),rides))+
geom_bar(stat = "identity",fill="#88CCEE")+
labs(x = "Months", y = "Number of Entries", title = "Entries per Month")+
theme_bw()+
scale_y_continuous(expand = c(0,0))
scale_x_continuous(expand = c(0,0))
#bar chart showing entries at UIC-Halsted each month for 2021
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot(aes(month(newDate,label = TRUE),rides))+
geom_bar(stat = "identity",fill="#88CCEE")+
labs(x = "Months", y = "Number of Entries", title = "Entries per Month")+
theme_bw()+
scale_y_continuous(expand = c(0,0))
scale_x_continuous(expand = c(0,0))
#groups sum of Rides per daytype together
temp1 = subset(Halsted,newDate > as.Date("2020-12-31"))
sumOfRidesPerDaytype = temp1 %>% group_by(daytype) %>% summarise(sum = sum(rides))
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot(aes(daytype,rides))+
geom_bar(stat = "identity",fill="#88CCEE")+
theme_bw()+
scale_y_continuous(expand = c(0,0), limits = c(0,max(sumOfRidesPerDaytype$sum) * 1.05), labels = scales::comma)+
labs(x = "Day Type", y = "Number of Entries", title = "Entries per Day Type")
library(tidyverse)
library(shiny)
library(shinydashboard)
library(lubridate)
dir()
#reading in data for halsted
Halsted <- read.table(file = "Halsted Stop.tsv", sep = "\t", header = TRUE)
#converting date type to workable column
newDate <- as.Date(Halsted$date, "%m/%d/%Y")
Halsted$newDate<-newDate
Halsted$date<-NULL
#total entries at UIC-Halsted for each year
ggplot(Halsted, aes(year(newDate),rides))+
geom_bar(stat="identity",fill="#88CCEE")+
labs(x = "Years", y = "Number of Entries", title = "Entries per Year")+
theme_bw()
#total entries at UIC-Halsted for each year
ggplot(Halsted, aes(year(newDate),rides))+
geom_bar(stat="identity",fill="#88CCEE")+
labs(x = "Years", y = "Number of Entries", title = "Entries per Year")+
theme_bw()
#bar chart showing entries at UIC-Halsted each day for 2021
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot()+
geom_bar(aes(newDate,rides,fill= uniq.loc),stat = "identity",fill="#88CCEE")+
labs(x = "Days of 2021", y = "Number of Entries", title = "Entries in 2021")+
theme_bw()+
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))
#reading in data for halsted
Halsted <- read.table(file = "Halsted Stop.tsv", sep = "\t", header = TRUE)
#converting date type to workable column
newDate <- as.Date(Halsted$date, "%m/%d/%Y")
Halsted$newDate<-newDate
Halsted$date<-NULL
#total entries at UIC-Halsted for each year
ggplot(Halsted, aes(year(newDate),rides))+
geom_bar(stat="identity",fill="#88CCEE")+
labs(x = "Years", y = "Number of Entries", title = "Entries per Year")+
theme_bw()
#bar chart showing entries at UIC-Halsted each day for 2021
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot()+
geom_bar(aes(newDate,rides,fill= uniq.loc),stat = "identity",fill="#88CCEE")+
labs(x = "Days of 2021", y = "Number of Entries", title = "Entries in 2021")+
theme_bw()+
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))
#bar chart showing entries at UIC-Halsted each month for 2021
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot(aes(month(newDate,label = TRUE),rides))+
geom_bar(stat = "identity",fill="#88CCEE")+
labs(x = "Months", y = "Number of Entries", title = "Entries per Month")+
theme_bw()+
scale_y_continuous(expand = c(0,0))
scale_x_continuous(expand = c(0,0))
setwd("D:/R data 424/Project 1")
getwd()
install.packages("shiny","tidyverse","shinydashboard","lubridate")
library(tidyverse)
library(shiny)
library(shinydashboard)
library(lubridate)
dir()
#reading in data for halsted
Halsted <- read.table(file = "Halsted Stop.tsv", sep = "\t", header = TRUE)
#converting date type to workable column
newDate <- as.Date(Halsted$date, "%m/%d/%Y")
Halsted$newDate<-newDate
Halsted$date<-NULL
#total entries at UIC-Halsted for each year
ggplot(Halsted, aes(year(newDate),rides))+
geom_bar(stat="identity",fill="#88CCEE")+
labs(x = "Years", y = "Number of Entries", title = "Entries per Year")+
theme_bw()
#bar chart showing entries at UIC-Halsted each day for 2021
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot()+
geom_bar(aes(newDate,rides,fill= uniq.loc),stat = "identity",fill="#88CCEE")+
labs(x = "Days of 2021", y = "Number of Entries", title = "Entries in 2021")+
theme_bw()+
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand = c(0,0))+
scale_y_continuous(expand = c(0,0))
#bar chart showing entries at UIC-Halsted each month for 2021
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot(aes(month(newDate,label = TRUE),rides))+
geom_bar(stat = "identity",fill="#88CCEE")+
labs(x = "Months", y = "Number of Entries", title = "Entries per Month")+
theme_bw()+
scale_y_continuous(expand = c(0,0))
scale_x_continuous(expand = c(0,0))
#groups sum of Rides per daytype together
temp1 = subset(Halsted,newDate > as.Date("2020-12-31"))
sumOfRidesPerDaytype = temp1 %>% group_by(daytype) %>% summarise(sum = sum(rides))
subset(Halsted,newDate > as.Date("2020-12-31")) %>%
ggplot(aes(daytype,rides))+
geom_bar(stat = "identity",fill="#88CCEE")+
theme_bw()+
scale_y_continuous(expand = c(0,0), limits = c(0,max(sumOfRidesPerDaytype$sum) * 1.05), labels = scales::comma)+
labs(x = "Day Type", y = "Number of Entries", title = "Entries per Day Type")
